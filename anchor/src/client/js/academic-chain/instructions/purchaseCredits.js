"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PURCHASE_CREDITS_DISCRIMINATOR = void 0;
exports.getPurchaseCreditsDiscriminatorBytes = getPurchaseCreditsDiscriminatorBytes;
exports.getPurchaseCreditsInstructionDataEncoder = getPurchaseCreditsInstructionDataEncoder;
exports.getPurchaseCreditsInstructionDataDecoder = getPurchaseCreditsInstructionDataDecoder;
exports.getPurchaseCreditsInstructionDataCodec = getPurchaseCreditsInstructionDataCodec;
exports.getPurchaseCreditsInstructionAsync = getPurchaseCreditsInstructionAsync;
exports.getPurchaseCreditsInstruction = getPurchaseCreditsInstruction;
exports.parsePurchaseCreditsInstruction = parsePurchaseCreditsInstruction;
var gill_1 = require("gill");
var programs_1 = require("../programs");
var shared_1 = require("../shared");
exports.PURCHASE_CREDITS_DISCRIMINATOR = new Uint8Array([
    228, 95, 55, 42, 168, 253, 222, 216,
]);
function getPurchaseCreditsDiscriminatorBytes() {
    return (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(exports.PURCHASE_CREDITS_DISCRIMINATOR);
}
function getPurchaseCreditsInstructionDataEncoder() {
    return (0, gill_1.transformEncoder)((0, gill_1.getStructEncoder)([
        ['discriminator', (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8)],
        ['amount', (0, gill_1.getU64Encoder)()],
    ]), function (value) { return (__assign(__assign({}, value), { discriminator: exports.PURCHASE_CREDITS_DISCRIMINATOR })); });
}
function getPurchaseCreditsInstructionDataDecoder() {
    return (0, gill_1.getStructDecoder)([
        ['discriminator', (0, gill_1.fixDecoderSize)((0, gill_1.getBytesDecoder)(), 8)],
        ['amount', (0, gill_1.getU64Decoder)()],
    ]);
}
function getPurchaseCreditsInstructionDataCodec() {
    return (0, gill_1.combineCodec)(getPurchaseCreditsInstructionDataEncoder(), getPurchaseCreditsInstructionDataDecoder());
}
function getPurchaseCreditsInstructionAsync(input, config) {
    return __awaiter(this, void 0, void 0, function () {
        var programAddress, originalAccounts, accounts, args, _a, _b, _c, getAccountMeta;
        var _d, _e, _f, _g, _h, _j, _k, _l, _m;
        return __generator(this, function (_o) {
            switch (_o.label) {
                case 0:
                    programAddress = (_d = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _d !== void 0 ? _d : programs_1.ACADEMIC_CHAIN_PROGRAM_ADDRESS;
                    originalAccounts = {
                        student: { value: (_e = input.student) !== null && _e !== void 0 ? _e : null, isWritable: true },
                        config: { value: (_f = input.config) !== null && _f !== void 0 ? _f : null, isWritable: false },
                        treasury: { value: (_g = input.treasury) !== null && _g !== void 0 ? _g : null, isWritable: true },
                        creditMint: { value: (_h = input.creditMint) !== null && _h !== void 0 ? _h : null, isWritable: true },
                        studentCreditAccount: {
                            value: (_j = input.studentCreditAccount) !== null && _j !== void 0 ? _j : null,
                            isWritable: true,
                        },
                        studentProfile: { value: (_k = input.studentProfile) !== null && _k !== void 0 ? _k : null, isWritable: true },
                        tokenProgram: { value: (_l = input.tokenProgram) !== null && _l !== void 0 ? _l : null, isWritable: false },
                        systemProgram: { value: (_m = input.systemProgram) !== null && _m !== void 0 ? _m : null, isWritable: false },
                    };
                    accounts = originalAccounts;
                    args = __assign({}, input);
                    if (!!accounts.config.value) return [3 /*break*/, 2];
                    _a = accounts.config;
                    return [4 /*yield*/, (0, gill_1.getProgramDerivedAddress)({
                            programAddress: programAddress,
                            seeds: [
                                (0, gill_1.getBytesEncoder)().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
                            ],
                        })];
                case 1:
                    _a.value = _o.sent();
                    _o.label = 2;
                case 2:
                    if (!!accounts.studentCreditAccount.value) return [3 /*break*/, 4];
                    _b = accounts.studentCreditAccount;
                    return [4 /*yield*/, (0, gill_1.getProgramDerivedAddress)({
                            programAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
                            seeds: [
                                (0, gill_1.getAddressEncoder)().encode((0, shared_1.expectAddress)(accounts.student.value)),
                                (0, gill_1.getBytesEncoder)().encode(new Uint8Array([
                                    6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
                                    121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
                                    126, 255, 0, 169,
                                ])),
                                (0, gill_1.getAddressEncoder)().encode((0, shared_1.expectAddress)(accounts.creditMint.value)),
                            ],
                        })];
                case 3:
                    _b.value = _o.sent();
                    _o.label = 4;
                case 4:
                    if (!!accounts.studentProfile.value) return [3 /*break*/, 6];
                    _c = accounts.studentProfile;
                    return [4 /*yield*/, (0, gill_1.getProgramDerivedAddress)({
                            programAddress: programAddress,
                            seeds: [
                                (0, gill_1.getBytesEncoder)().encode(new Uint8Array([
                                    115, 116, 117, 100, 101, 110, 116, 95, 112, 114, 111, 102, 105, 108,
                                    101,
                                ])),
                                (0, gill_1.getAddressEncoder)().encode((0, shared_1.expectAddress)(accounts.student.value)),
                            ],
                        })];
                case 5:
                    _c.value = _o.sent();
                    _o.label = 6;
                case 6:
                    if (!accounts.tokenProgram.value) {
                        accounts.tokenProgram.value =
                            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
                    }
                    if (!accounts.systemProgram.value) {
                        accounts.systemProgram.value =
                            '11111111111111111111111111111111';
                    }
                    getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
                    return [2 /*return*/, Object.freeze({
                            accounts: [
                                getAccountMeta(accounts.student),
                                getAccountMeta(accounts.config),
                                getAccountMeta(accounts.treasury),
                                getAccountMeta(accounts.creditMint),
                                getAccountMeta(accounts.studentCreditAccount),
                                getAccountMeta(accounts.studentProfile),
                                getAccountMeta(accounts.tokenProgram),
                                getAccountMeta(accounts.systemProgram),
                            ],
                            data: getPurchaseCreditsInstructionDataEncoder().encode(args),
                            programAddress: programAddress,
                        })];
            }
        });
    });
}
function getPurchaseCreditsInstruction(input, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    // Program address.
    var programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.ACADEMIC_CHAIN_PROGRAM_ADDRESS;
    // Original accounts.
    var originalAccounts = {
        student: { value: (_b = input.student) !== null && _b !== void 0 ? _b : null, isWritable: true },
        config: { value: (_c = input.config) !== null && _c !== void 0 ? _c : null, isWritable: false },
        treasury: { value: (_d = input.treasury) !== null && _d !== void 0 ? _d : null, isWritable: true },
        creditMint: { value: (_e = input.creditMint) !== null && _e !== void 0 ? _e : null, isWritable: true },
        studentCreditAccount: {
            value: (_f = input.studentCreditAccount) !== null && _f !== void 0 ? _f : null,
            isWritable: true,
        },
        studentProfile: { value: (_g = input.studentProfile) !== null && _g !== void 0 ? _g : null, isWritable: true },
        tokenProgram: { value: (_h = input.tokenProgram) !== null && _h !== void 0 ? _h : null, isWritable: false },
        systemProgram: { value: (_j = input.systemProgram) !== null && _j !== void 0 ? _j : null, isWritable: false },
    };
    var accounts = originalAccounts;
    // Original args.
    var args = __assign({}, input);
    // Resolve default values.
    if (!accounts.tokenProgram.value) {
        accounts.tokenProgram.value =
            'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    var getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    return Object.freeze({
        accounts: [
            getAccountMeta(accounts.student),
            getAccountMeta(accounts.config),
            getAccountMeta(accounts.treasury),
            getAccountMeta(accounts.creditMint),
            getAccountMeta(accounts.studentCreditAccount),
            getAccountMeta(accounts.studentProfile),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.systemProgram),
        ],
        data: getPurchaseCreditsInstructionDataEncoder().encode(args),
        programAddress: programAddress,
    });
}
function parsePurchaseCreditsInstruction(instruction) {
    if (instruction.accounts.length < 8) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    var accountIndex = 0;
    var getNextAccount = function () {
        var accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            student: getNextAccount(),
            config: getNextAccount(),
            treasury: getNextAccount(),
            creditMint: getNextAccount(),
            studentCreditAccount: getNextAccount(),
            studentProfile: getNextAccount(),
            tokenProgram: getNextAccount(),
            systemProgram: getNextAccount(),
        },
        data: getPurchaseCreditsInstructionDataDecoder().decode(instruction.data),
    };
}
