/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { ACADEMIC_CHAIN_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_GRADUATION_DISCRIMINATOR = new Uint8Array([
  87, 121, 87, 168, 63, 70, 91, 158,
]);

export function getClaimGraduationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLAIM_GRADUATION_DISCRIMINATOR
  );
}

export type ClaimGraduationInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountStudent extends string | AccountMeta<string> = string,
  TAccountStudentProfile extends string | AccountMeta<string> = string,
  TAccountGraduationMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStudent extends string
        ? WritableSignerAccount<TAccountStudent> &
            AccountSignerMeta<TAccountStudent>
        : TAccountStudent,
      TAccountStudentProfile extends string
        ? WritableAccount<TAccountStudentProfile>
        : TAccountStudentProfile,
      TAccountGraduationMint extends string
        ? WritableAccount<TAccountGraduationMint>
        : TAccountGraduationMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimGraduationInstructionData = {
  discriminator: ReadonlyUint8Array;
  requiredCourses: Array<string>;
};

export type ClaimGraduationInstructionDataArgs = {
  requiredCourses: Array<string>;
};

export function getClaimGraduationInstructionDataEncoder(): Encoder<ClaimGraduationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'requiredCourses',
        getArrayEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_GRADUATION_DISCRIMINATOR })
  );
}

export function getClaimGraduationInstructionDataDecoder(): Decoder<ClaimGraduationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'requiredCourses',
      getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getClaimGraduationInstructionDataCodec(): Codec<
  ClaimGraduationInstructionDataArgs,
  ClaimGraduationInstructionData
> {
  return combineCodec(
    getClaimGraduationInstructionDataEncoder(),
    getClaimGraduationInstructionDataDecoder()
  );
}

export type ClaimGraduationAsyncInput<
  TAccountStudent extends string = string,
  TAccountStudentProfile extends string = string,
  TAccountGraduationMint extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  student: TransactionSigner<TAccountStudent>;
  studentProfile?: Address<TAccountStudentProfile>;
  graduationMint?: Address<TAccountGraduationMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  requiredCourses: ClaimGraduationInstructionDataArgs['requiredCourses'];
};

export async function getClaimGraduationInstructionAsync<
  TAccountStudent extends string,
  TAccountStudentProfile extends string,
  TAccountGraduationMint extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: ClaimGraduationAsyncInput<
    TAccountStudent,
    TAccountStudentProfile,
    TAccountGraduationMint,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimGraduationInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountStudentProfile,
    TAccountGraduationMint,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    student: { value: input.student ?? null, isWritable: true },
    studentProfile: { value: input.studentProfile ?? null, isWritable: true },
    graduationMint: { value: input.graduationMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.studentProfile.value) {
    accounts.studentProfile.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 116, 117, 100, 101, 110, 116, 95, 112, 114, 111, 102, 105, 108,
            101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.student.value)),
      ],
    });
  }
  if (!accounts.graduationMint.value) {
    accounts.graduationMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 114, 97, 100, 117, 97, 116, 105, 111, 110, 95, 109, 105, 110,
            116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.student.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.student),
      getAccountMeta(accounts.studentProfile),
      getAccountMeta(accounts.graduationMint),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getClaimGraduationInstructionDataEncoder().encode(
      args as ClaimGraduationInstructionDataArgs
    ),
    programAddress,
  } as ClaimGraduationInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountStudentProfile,
    TAccountGraduationMint,
    TAccountSystemProgram
  >);
}

export type ClaimGraduationInput<
  TAccountStudent extends string = string,
  TAccountStudentProfile extends string = string,
  TAccountGraduationMint extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  student: TransactionSigner<TAccountStudent>;
  studentProfile: Address<TAccountStudentProfile>;
  graduationMint: Address<TAccountGraduationMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  requiredCourses: ClaimGraduationInstructionDataArgs['requiredCourses'];
};

export function getClaimGraduationInstruction<
  TAccountStudent extends string,
  TAccountStudentProfile extends string,
  TAccountGraduationMint extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: ClaimGraduationInput<
    TAccountStudent,
    TAccountStudentProfile,
    TAccountGraduationMint,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimGraduationInstruction<
  TProgramAddress,
  TAccountStudent,
  TAccountStudentProfile,
  TAccountGraduationMint,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    student: { value: input.student ?? null, isWritable: true },
    studentProfile: { value: input.studentProfile ?? null, isWritable: true },
    graduationMint: { value: input.graduationMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.student),
      getAccountMeta(accounts.studentProfile),
      getAccountMeta(accounts.graduationMint),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getClaimGraduationInstructionDataEncoder().encode(
      args as ClaimGraduationInstructionDataArgs
    ),
    programAddress,
  } as ClaimGraduationInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountStudentProfile,
    TAccountGraduationMint,
    TAccountSystemProgram
  >);
}

export type ParsedClaimGraduationInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    student: TAccountMetas[0];
    studentProfile: TAccountMetas[1];
    graduationMint: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: ClaimGraduationInstructionData;
};

export function parseClaimGraduationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimGraduationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      student: getNextAccount(),
      studentProfile: getNextAccount(),
      graduationMint: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimGraduationInstructionDataDecoder().decode(instruction.data),
  };
}
