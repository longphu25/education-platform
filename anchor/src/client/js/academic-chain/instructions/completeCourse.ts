/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { ACADEMIC_CHAIN_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const COMPLETE_COURSE_DISCRIMINATOR = new Uint8Array([
  91, 113, 236, 190, 183, 191, 2, 63,
]);

export function getCompleteCourseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COMPLETE_COURSE_DISCRIMINATOR
  );
}

export type CompleteCourseInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountInstructor extends string | AccountMeta<string> = string,
  TAccountCourse extends string | AccountMeta<string> = string,
  TAccountStudent extends string | AccountMeta<string> = string,
  TAccountEnrollment extends string | AccountMeta<string> = string,
  TAccountStudentProfile extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountInstructor extends string
        ? WritableSignerAccount<TAccountInstructor> &
            AccountSignerMeta<TAccountInstructor>
        : TAccountInstructor,
      TAccountCourse extends string
        ? ReadonlyAccount<TAccountCourse>
        : TAccountCourse,
      TAccountStudent extends string
        ? ReadonlyAccount<TAccountStudent>
        : TAccountStudent,
      TAccountEnrollment extends string
        ? WritableAccount<TAccountEnrollment>
        : TAccountEnrollment,
      TAccountStudentProfile extends string
        ? WritableAccount<TAccountStudentProfile>
        : TAccountStudentProfile,
      ...TRemainingAccounts,
    ]
  >;

export type CompleteCourseInstructionData = {
  discriminator: ReadonlyUint8Array;
  courseId: string;
  grade: number;
};

export type CompleteCourseInstructionDataArgs = {
  courseId: string;
  grade: number;
};

export function getCompleteCourseInstructionDataEncoder(): Encoder<CompleteCourseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['courseId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['grade', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COMPLETE_COURSE_DISCRIMINATOR })
  );
}

export function getCompleteCourseInstructionDataDecoder(): Decoder<CompleteCourseInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['courseId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['grade', getU8Decoder()],
  ]);
}

export function getCompleteCourseInstructionDataCodec(): Codec<
  CompleteCourseInstructionDataArgs,
  CompleteCourseInstructionData
> {
  return combineCodec(
    getCompleteCourseInstructionDataEncoder(),
    getCompleteCourseInstructionDataDecoder()
  );
}

export type CompleteCourseAsyncInput<
  TAccountInstructor extends string = string,
  TAccountCourse extends string = string,
  TAccountStudent extends string = string,
  TAccountEnrollment extends string = string,
  TAccountStudentProfile extends string = string,
> = {
  instructor: TransactionSigner<TAccountInstructor>;
  course?: Address<TAccountCourse>;
  student: Address<TAccountStudent>;
  enrollment?: Address<TAccountEnrollment>;
  studentProfile?: Address<TAccountStudentProfile>;
  courseId: CompleteCourseInstructionDataArgs['courseId'];
  grade: CompleteCourseInstructionDataArgs['grade'];
};

export async function getCompleteCourseInstructionAsync<
  TAccountInstructor extends string,
  TAccountCourse extends string,
  TAccountStudent extends string,
  TAccountEnrollment extends string,
  TAccountStudentProfile extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: CompleteCourseAsyncInput<
    TAccountInstructor,
    TAccountCourse,
    TAccountStudent,
    TAccountEnrollment,
    TAccountStudentProfile
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CompleteCourseInstruction<
    TProgramAddress,
    TAccountInstructor,
    TAccountCourse,
    TAccountStudent,
    TAccountEnrollment,
    TAccountStudentProfile
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    instructor: { value: input.instructor ?? null, isWritable: true },
    course: { value: input.course ?? null, isWritable: false },
    student: { value: input.student ?? null, isWritable: false },
    enrollment: { value: input.enrollment ?? null, isWritable: true },
    studentProfile: { value: input.studentProfile ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.course.value) {
    accounts.course.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 117, 114, 115, 101])),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.courseId)
        ),
      ],
    });
  }
  if (!accounts.enrollment.value) {
    accounts.enrollment.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([101, 110, 114, 111, 108, 108, 109, 101, 110, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.student.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.courseId)
        ),
      ],
    });
  }
  if (!accounts.studentProfile.value) {
    accounts.studentProfile.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 116, 117, 100, 101, 110, 116, 95, 112, 114, 111, 102, 105, 108,
            101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.student.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.instructor),
      getAccountMeta(accounts.course),
      getAccountMeta(accounts.student),
      getAccountMeta(accounts.enrollment),
      getAccountMeta(accounts.studentProfile),
    ],
    data: getCompleteCourseInstructionDataEncoder().encode(
      args as CompleteCourseInstructionDataArgs
    ),
    programAddress,
  } as CompleteCourseInstruction<
    TProgramAddress,
    TAccountInstructor,
    TAccountCourse,
    TAccountStudent,
    TAccountEnrollment,
    TAccountStudentProfile
  >);
}

export type CompleteCourseInput<
  TAccountInstructor extends string = string,
  TAccountCourse extends string = string,
  TAccountStudent extends string = string,
  TAccountEnrollment extends string = string,
  TAccountStudentProfile extends string = string,
> = {
  instructor: TransactionSigner<TAccountInstructor>;
  course: Address<TAccountCourse>;
  student: Address<TAccountStudent>;
  enrollment: Address<TAccountEnrollment>;
  studentProfile: Address<TAccountStudentProfile>;
  courseId: CompleteCourseInstructionDataArgs['courseId'];
  grade: CompleteCourseInstructionDataArgs['grade'];
};

export function getCompleteCourseInstruction<
  TAccountInstructor extends string,
  TAccountCourse extends string,
  TAccountStudent extends string,
  TAccountEnrollment extends string,
  TAccountStudentProfile extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: CompleteCourseInput<
    TAccountInstructor,
    TAccountCourse,
    TAccountStudent,
    TAccountEnrollment,
    TAccountStudentProfile
  >,
  config?: { programAddress?: TProgramAddress }
): CompleteCourseInstruction<
  TProgramAddress,
  TAccountInstructor,
  TAccountCourse,
  TAccountStudent,
  TAccountEnrollment,
  TAccountStudentProfile
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    instructor: { value: input.instructor ?? null, isWritable: true },
    course: { value: input.course ?? null, isWritable: false },
    student: { value: input.student ?? null, isWritable: false },
    enrollment: { value: input.enrollment ?? null, isWritable: true },
    studentProfile: { value: input.studentProfile ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.instructor),
      getAccountMeta(accounts.course),
      getAccountMeta(accounts.student),
      getAccountMeta(accounts.enrollment),
      getAccountMeta(accounts.studentProfile),
    ],
    data: getCompleteCourseInstructionDataEncoder().encode(
      args as CompleteCourseInstructionDataArgs
    ),
    programAddress,
  } as CompleteCourseInstruction<
    TProgramAddress,
    TAccountInstructor,
    TAccountCourse,
    TAccountStudent,
    TAccountEnrollment,
    TAccountStudentProfile
  >);
}

export type ParsedCompleteCourseInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    instructor: TAccountMetas[0];
    course: TAccountMetas[1];
    student: TAccountMetas[2];
    enrollment: TAccountMetas[3];
    studentProfile: TAccountMetas[4];
  };
  data: CompleteCourseInstructionData;
};

export function parseCompleteCourseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCompleteCourseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      instructor: getNextAccount(),
      course: getNextAccount(),
      student: getNextAccount(),
      enrollment: getNextAccount(),
      studentProfile: getNextAccount(),
    },
    data: getCompleteCourseInstructionDataDecoder().decode(instruction.data),
  };
}
