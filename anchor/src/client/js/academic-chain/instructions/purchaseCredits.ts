/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { ACADEMIC_CHAIN_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PURCHASE_CREDITS_DISCRIMINATOR = new Uint8Array([
  228, 95, 55, 42, 168, 253, 222, 216,
]);

export function getPurchaseCreditsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PURCHASE_CREDITS_DISCRIMINATOR
  );
}

export type PurchaseCreditsInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountStudent extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountCreditMint extends string | AccountMeta<string> = string,
  TAccountStudentCreditAccount extends string | AccountMeta<string> = string,
  TAccountStudentProfile extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStudent extends string
        ? WritableSignerAccount<TAccountStudent> &
            AccountSignerMeta<TAccountStudent>
        : TAccountStudent,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountCreditMint extends string
        ? WritableAccount<TAccountCreditMint>
        : TAccountCreditMint,
      TAccountStudentCreditAccount extends string
        ? WritableAccount<TAccountStudentCreditAccount>
        : TAccountStudentCreditAccount,
      TAccountStudentProfile extends string
        ? WritableAccount<TAccountStudentProfile>
        : TAccountStudentProfile,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PurchaseCreditsInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type PurchaseCreditsInstructionDataArgs = { amount: number | bigint };

export function getPurchaseCreditsInstructionDataEncoder(): FixedSizeEncoder<PurchaseCreditsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PURCHASE_CREDITS_DISCRIMINATOR })
  );
}

export function getPurchaseCreditsInstructionDataDecoder(): FixedSizeDecoder<PurchaseCreditsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getPurchaseCreditsInstructionDataCodec(): FixedSizeCodec<
  PurchaseCreditsInstructionDataArgs,
  PurchaseCreditsInstructionData
> {
  return combineCodec(
    getPurchaseCreditsInstructionDataEncoder(),
    getPurchaseCreditsInstructionDataDecoder()
  );
}

export type PurchaseCreditsAsyncInput<
  TAccountStudent extends string = string,
  TAccountConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountCreditMint extends string = string,
  TAccountStudentCreditAccount extends string = string,
  TAccountStudentProfile extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  student: TransactionSigner<TAccountStudent>;
  config?: Address<TAccountConfig>;
  treasury: Address<TAccountTreasury>;
  creditMint: Address<TAccountCreditMint>;
  studentCreditAccount?: Address<TAccountStudentCreditAccount>;
  studentProfile?: Address<TAccountStudentProfile>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: PurchaseCreditsInstructionDataArgs['amount'];
};

export async function getPurchaseCreditsInstructionAsync<
  TAccountStudent extends string,
  TAccountConfig extends string,
  TAccountTreasury extends string,
  TAccountCreditMint extends string,
  TAccountStudentCreditAccount extends string,
  TAccountStudentProfile extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: PurchaseCreditsAsyncInput<
    TAccountStudent,
    TAccountConfig,
    TAccountTreasury,
    TAccountCreditMint,
    TAccountStudentCreditAccount,
    TAccountStudentProfile,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PurchaseCreditsInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountConfig,
    TAccountTreasury,
    TAccountCreditMint,
    TAccountStudentCreditAccount,
    TAccountStudentProfile,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    student: { value: input.student ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: true },
    creditMint: { value: input.creditMint ?? null, isWritable: true },
    studentCreditAccount: {
      value: input.studentCreditAccount ?? null,
      isWritable: true,
    },
    studentProfile: { value: input.studentProfile ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
      ],
    });
  }
  if (!accounts.studentCreditAccount.value) {
    accounts.studentCreditAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.student.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.creditMint.value)),
      ],
    });
  }
  if (!accounts.studentProfile.value) {
    accounts.studentProfile.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 116, 117, 100, 101, 110, 116, 95, 112, 114, 111, 102, 105, 108,
            101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.student.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.student),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.creditMint),
      getAccountMeta(accounts.studentCreditAccount),
      getAccountMeta(accounts.studentProfile),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getPurchaseCreditsInstructionDataEncoder().encode(
      args as PurchaseCreditsInstructionDataArgs
    ),
    programAddress,
  } as PurchaseCreditsInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountConfig,
    TAccountTreasury,
    TAccountCreditMint,
    TAccountStudentCreditAccount,
    TAccountStudentProfile,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type PurchaseCreditsInput<
  TAccountStudent extends string = string,
  TAccountConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountCreditMint extends string = string,
  TAccountStudentCreditAccount extends string = string,
  TAccountStudentProfile extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  student: TransactionSigner<TAccountStudent>;
  config: Address<TAccountConfig>;
  treasury: Address<TAccountTreasury>;
  creditMint: Address<TAccountCreditMint>;
  studentCreditAccount: Address<TAccountStudentCreditAccount>;
  studentProfile: Address<TAccountStudentProfile>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: PurchaseCreditsInstructionDataArgs['amount'];
};

export function getPurchaseCreditsInstruction<
  TAccountStudent extends string,
  TAccountConfig extends string,
  TAccountTreasury extends string,
  TAccountCreditMint extends string,
  TAccountStudentCreditAccount extends string,
  TAccountStudentProfile extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: PurchaseCreditsInput<
    TAccountStudent,
    TAccountConfig,
    TAccountTreasury,
    TAccountCreditMint,
    TAccountStudentCreditAccount,
    TAccountStudentProfile,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PurchaseCreditsInstruction<
  TProgramAddress,
  TAccountStudent,
  TAccountConfig,
  TAccountTreasury,
  TAccountCreditMint,
  TAccountStudentCreditAccount,
  TAccountStudentProfile,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    student: { value: input.student ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    treasury: { value: input.treasury ?? null, isWritable: true },
    creditMint: { value: input.creditMint ?? null, isWritable: true },
    studentCreditAccount: {
      value: input.studentCreditAccount ?? null,
      isWritable: true,
    },
    studentProfile: { value: input.studentProfile ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.student),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.creditMint),
      getAccountMeta(accounts.studentCreditAccount),
      getAccountMeta(accounts.studentProfile),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getPurchaseCreditsInstructionDataEncoder().encode(
      args as PurchaseCreditsInstructionDataArgs
    ),
    programAddress,
  } as PurchaseCreditsInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountConfig,
    TAccountTreasury,
    TAccountCreditMint,
    TAccountStudentCreditAccount,
    TAccountStudentProfile,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedPurchaseCreditsInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    student: TAccountMetas[0];
    config: TAccountMetas[1];
    treasury: TAccountMetas[2];
    creditMint: TAccountMetas[3];
    studentCreditAccount: TAccountMetas[4];
    studentProfile: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
  };
  data: PurchaseCreditsInstructionData;
};

export function parsePurchaseCreditsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPurchaseCreditsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      student: getNextAccount(),
      config: getNextAccount(),
      treasury: getNextAccount(),
      creditMint: getNextAccount(),
      studentCreditAccount: getNextAccount(),
      studentProfile: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getPurchaseCreditsInstructionDataDecoder().decode(instruction.data),
  };
}
