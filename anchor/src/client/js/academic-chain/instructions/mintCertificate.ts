/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { ACADEMIC_CHAIN_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MINT_CERTIFICATE_DISCRIMINATOR = new Uint8Array([
  53, 2, 104, 84, 51, 197, 179, 10,
]);

export function getMintCertificateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MINT_CERTIFICATE_DISCRIMINATOR
  );
}

export type MintCertificateInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountStudent extends string | AccountMeta<string> = string,
  TAccountCourse extends string | AccountMeta<string> = string,
  TAccountEnrollment extends string | AccountMeta<string> = string,
  TAccountCertificateMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountStudent extends string
        ? WritableSignerAccount<TAccountStudent> &
            AccountSignerMeta<TAccountStudent>
        : TAccountStudent,
      TAccountCourse extends string
        ? ReadonlyAccount<TAccountCourse>
        : TAccountCourse,
      TAccountEnrollment extends string
        ? WritableAccount<TAccountEnrollment>
        : TAccountEnrollment,
      TAccountCertificateMint extends string
        ? WritableAccount<TAccountCertificateMint>
        : TAccountCertificateMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintCertificateInstructionData = {
  discriminator: ReadonlyUint8Array;
  courseId: string;
  metadataUri: string;
};

export type MintCertificateInstructionDataArgs = {
  courseId: string;
  metadataUri: string;
};

export function getMintCertificateInstructionDataEncoder(): Encoder<MintCertificateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['courseId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: MINT_CERTIFICATE_DISCRIMINATOR })
  );
}

export function getMintCertificateInstructionDataDecoder(): Decoder<MintCertificateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['courseId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getMintCertificateInstructionDataCodec(): Codec<
  MintCertificateInstructionDataArgs,
  MintCertificateInstructionData
> {
  return combineCodec(
    getMintCertificateInstructionDataEncoder(),
    getMintCertificateInstructionDataDecoder()
  );
}

export type MintCertificateAsyncInput<
  TAccountStudent extends string = string,
  TAccountCourse extends string = string,
  TAccountEnrollment extends string = string,
  TAccountCertificateMint extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  student: TransactionSigner<TAccountStudent>;
  course?: Address<TAccountCourse>;
  enrollment?: Address<TAccountEnrollment>;
  certificateMint?: Address<TAccountCertificateMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  courseId: MintCertificateInstructionDataArgs['courseId'];
  metadataUri: MintCertificateInstructionDataArgs['metadataUri'];
};

export async function getMintCertificateInstructionAsync<
  TAccountStudent extends string,
  TAccountCourse extends string,
  TAccountEnrollment extends string,
  TAccountCertificateMint extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: MintCertificateAsyncInput<
    TAccountStudent,
    TAccountCourse,
    TAccountEnrollment,
    TAccountCertificateMint,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MintCertificateInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountCourse,
    TAccountEnrollment,
    TAccountCertificateMint,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    student: { value: input.student ?? null, isWritable: true },
    course: { value: input.course ?? null, isWritable: false },
    enrollment: { value: input.enrollment ?? null, isWritable: true },
    certificateMint: { value: input.certificateMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.course.value) {
    accounts.course.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 117, 114, 115, 101])),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.courseId)
        ),
      ],
    });
  }
  if (!accounts.enrollment.value) {
    accounts.enrollment.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([101, 110, 114, 111, 108, 108, 109, 101, 110, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.student.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.courseId)
        ),
      ],
    });
  }
  if (!accounts.certificateMint.value) {
    accounts.certificateMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 101, 114, 116, 105, 102, 105, 99, 97, 116, 101, 95, 109, 105,
            110, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.student.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.courseId)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.student),
      getAccountMeta(accounts.course),
      getAccountMeta(accounts.enrollment),
      getAccountMeta(accounts.certificateMint),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMintCertificateInstructionDataEncoder().encode(
      args as MintCertificateInstructionDataArgs
    ),
    programAddress,
  } as MintCertificateInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountCourse,
    TAccountEnrollment,
    TAccountCertificateMint,
    TAccountSystemProgram
  >);
}

export type MintCertificateInput<
  TAccountStudent extends string = string,
  TAccountCourse extends string = string,
  TAccountEnrollment extends string = string,
  TAccountCertificateMint extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  student: TransactionSigner<TAccountStudent>;
  course: Address<TAccountCourse>;
  enrollment: Address<TAccountEnrollment>;
  certificateMint: Address<TAccountCertificateMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  courseId: MintCertificateInstructionDataArgs['courseId'];
  metadataUri: MintCertificateInstructionDataArgs['metadataUri'];
};

export function getMintCertificateInstruction<
  TAccountStudent extends string,
  TAccountCourse extends string,
  TAccountEnrollment extends string,
  TAccountCertificateMint extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: MintCertificateInput<
    TAccountStudent,
    TAccountCourse,
    TAccountEnrollment,
    TAccountCertificateMint,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintCertificateInstruction<
  TProgramAddress,
  TAccountStudent,
  TAccountCourse,
  TAccountEnrollment,
  TAccountCertificateMint,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    student: { value: input.student ?? null, isWritable: true },
    course: { value: input.course ?? null, isWritable: false },
    enrollment: { value: input.enrollment ?? null, isWritable: true },
    certificateMint: { value: input.certificateMint ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.student),
      getAccountMeta(accounts.course),
      getAccountMeta(accounts.enrollment),
      getAccountMeta(accounts.certificateMint),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMintCertificateInstructionDataEncoder().encode(
      args as MintCertificateInstructionDataArgs
    ),
    programAddress,
  } as MintCertificateInstruction<
    TProgramAddress,
    TAccountStudent,
    TAccountCourse,
    TAccountEnrollment,
    TAccountCertificateMint,
    TAccountSystemProgram
  >);
}

export type ParsedMintCertificateInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    student: TAccountMetas[0];
    course: TAccountMetas[1];
    enrollment: TAccountMetas[2];
    certificateMint: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: MintCertificateInstructionData;
};

export function parseMintCertificateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMintCertificateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      student: getNextAccount(),
      course: getNextAccount(),
      enrollment: getNextAccount(),
      certificateMint: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintCertificateInstructionDataDecoder().decode(instruction.data),
  };
}
