/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { ACADEMIC_CHAIN_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_COURSE_DISCRIMINATOR = new Uint8Array([
  120, 121, 154, 164, 107, 180, 167, 241,
]);

export function getCreateCourseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_COURSE_DISCRIMINATOR
  );
}

export type CreateCourseInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountCourse extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountCourse extends string
        ? WritableAccount<TAccountCourse>
        : TAccountCourse,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateCourseInstructionData = {
  discriminator: ReadonlyUint8Array;
  courseId: string;
  courseName: string;
  instructor: Address;
  requiredCredits: bigint;
};

export type CreateCourseInstructionDataArgs = {
  courseId: string;
  courseName: string;
  instructor: Address;
  requiredCredits: number | bigint;
};

export function getCreateCourseInstructionDataEncoder(): Encoder<CreateCourseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['courseId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['courseName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['instructor', getAddressEncoder()],
      ['requiredCredits', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_COURSE_DISCRIMINATOR })
  );
}

export function getCreateCourseInstructionDataDecoder(): Decoder<CreateCourseInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['courseId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['courseName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['instructor', getAddressDecoder()],
    ['requiredCredits', getU64Decoder()],
  ]);
}

export function getCreateCourseInstructionDataCodec(): Codec<
  CreateCourseInstructionDataArgs,
  CreateCourseInstructionData
> {
  return combineCodec(
    getCreateCourseInstructionDataEncoder(),
    getCreateCourseInstructionDataDecoder()
  );
}

export type CreateCourseAsyncInput<
  TAccountAuthority extends string = string,
  TAccountCourse extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  course?: Address<TAccountCourse>;
  systemProgram?: Address<TAccountSystemProgram>;
  courseId: CreateCourseInstructionDataArgs['courseId'];
  courseName: CreateCourseInstructionDataArgs['courseName'];
  instructor: CreateCourseInstructionDataArgs['instructor'];
  requiredCredits: CreateCourseInstructionDataArgs['requiredCredits'];
};

export async function getCreateCourseInstructionAsync<
  TAccountAuthority extends string,
  TAccountCourse extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: CreateCourseAsyncInput<
    TAccountAuthority,
    TAccountCourse,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateCourseInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountCourse,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    course: { value: input.course ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.course.value) {
    accounts.course.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 117, 114, 115, 101])),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.courseId)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.course),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateCourseInstructionDataEncoder().encode(
      args as CreateCourseInstructionDataArgs
    ),
    programAddress,
  } as CreateCourseInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountCourse,
    TAccountSystemProgram
  >);
}

export type CreateCourseInput<
  TAccountAuthority extends string = string,
  TAccountCourse extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  course: Address<TAccountCourse>;
  systemProgram?: Address<TAccountSystemProgram>;
  courseId: CreateCourseInstructionDataArgs['courseId'];
  courseName: CreateCourseInstructionDataArgs['courseName'];
  instructor: CreateCourseInstructionDataArgs['instructor'];
  requiredCredits: CreateCourseInstructionDataArgs['requiredCredits'];
};

export function getCreateCourseInstruction<
  TAccountAuthority extends string,
  TAccountCourse extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
>(
  input: CreateCourseInput<
    TAccountAuthority,
    TAccountCourse,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateCourseInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountCourse,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ACADEMIC_CHAIN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    course: { value: input.course ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.course),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateCourseInstructionDataEncoder().encode(
      args as CreateCourseInstructionDataArgs
    ),
    programAddress,
  } as CreateCourseInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountCourse,
    TAccountSystemProgram
  >);
}

export type ParsedCreateCourseInstruction<
  TProgram extends string = typeof ACADEMIC_CHAIN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    course: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateCourseInstructionData;
};

export function parseCreateCourseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateCourseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      course: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateCourseInstructionDataDecoder().decode(instruction.data),
  };
}
