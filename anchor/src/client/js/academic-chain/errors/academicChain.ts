/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { ACADEMIC_CHAIN_PROGRAM_ADDRESS } from '../programs';

/** InsufficientCredits: Insufficient credits to register for this course */
export const ACADEMIC_CHAIN_ERROR__INSUFFICIENT_CREDITS = 0x1770; // 6000
/** CourseNotActive: Course is not active */
export const ACADEMIC_CHAIN_ERROR__COURSE_NOT_ACTIVE = 0x1771; // 6001
/** AlreadyEnrolled: Student already enrolled in this course */
export const ACADEMIC_CHAIN_ERROR__ALREADY_ENROLLED = 0x1772; // 6002
/** CourseNotCompleted: Course not completed yet */
export const ACADEMIC_CHAIN_ERROR__COURSE_NOT_COMPLETED = 0x1773; // 6003
/** InvalidGrade: Invalid grade value (must be 0-100) */
export const ACADEMIC_CHAIN_ERROR__INVALID_GRADE = 0x1774; // 6004
/** UnauthorizedInstructor: Unauthorized: Only instructor can perform this action */
export const ACADEMIC_CHAIN_ERROR__UNAUTHORIZED_INSTRUCTOR = 0x1775; // 6005
/** CertificateAlreadyMinted: Certificate already minted for this course */
export const ACADEMIC_CHAIN_ERROR__CERTIFICATE_ALREADY_MINTED = 0x1776; // 6006
/** RequirementsNotMet: Not all required courses completed */
export const ACADEMIC_CHAIN_ERROR__REQUIREMENTS_NOT_MET = 0x1777; // 6007
/** InvalidCourseId: Invalid course ID format */
export const ACADEMIC_CHAIN_ERROR__INVALID_COURSE_ID = 0x1778; // 6008
/** ArithmeticOverflow: Arithmetic overflow */
export const ACADEMIC_CHAIN_ERROR__ARITHMETIC_OVERFLOW = 0x1779; // 6009

export type AcademicChainError =
  | typeof ACADEMIC_CHAIN_ERROR__ALREADY_ENROLLED
  | typeof ACADEMIC_CHAIN_ERROR__ARITHMETIC_OVERFLOW
  | typeof ACADEMIC_CHAIN_ERROR__CERTIFICATE_ALREADY_MINTED
  | typeof ACADEMIC_CHAIN_ERROR__COURSE_NOT_ACTIVE
  | typeof ACADEMIC_CHAIN_ERROR__COURSE_NOT_COMPLETED
  | typeof ACADEMIC_CHAIN_ERROR__INSUFFICIENT_CREDITS
  | typeof ACADEMIC_CHAIN_ERROR__INVALID_COURSE_ID
  | typeof ACADEMIC_CHAIN_ERROR__INVALID_GRADE
  | typeof ACADEMIC_CHAIN_ERROR__REQUIREMENTS_NOT_MET
  | typeof ACADEMIC_CHAIN_ERROR__UNAUTHORIZED_INSTRUCTOR;

let academicChainErrorMessages: Record<AcademicChainError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  academicChainErrorMessages = {
    [ACADEMIC_CHAIN_ERROR__ALREADY_ENROLLED]: `Student already enrolled in this course`,
    [ACADEMIC_CHAIN_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
    [ACADEMIC_CHAIN_ERROR__CERTIFICATE_ALREADY_MINTED]: `Certificate already minted for this course`,
    [ACADEMIC_CHAIN_ERROR__COURSE_NOT_ACTIVE]: `Course is not active`,
    [ACADEMIC_CHAIN_ERROR__COURSE_NOT_COMPLETED]: `Course not completed yet`,
    [ACADEMIC_CHAIN_ERROR__INSUFFICIENT_CREDITS]: `Insufficient credits to register for this course`,
    [ACADEMIC_CHAIN_ERROR__INVALID_COURSE_ID]: `Invalid course ID format`,
    [ACADEMIC_CHAIN_ERROR__INVALID_GRADE]: `Invalid grade value (must be 0-100)`,
    [ACADEMIC_CHAIN_ERROR__REQUIREMENTS_NOT_MET]: `Not all required courses completed`,
    [ACADEMIC_CHAIN_ERROR__UNAUTHORIZED_INSTRUCTOR]: `Unauthorized: Only instructor can perform this action`,
  };
}

export function getAcademicChainErrorMessage(code: AcademicChainError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (academicChainErrorMessages as Record<AcademicChainError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isAcademicChainError<
  TProgramErrorCode extends AcademicChainError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    ACADEMIC_CHAIN_PROGRAM_ADDRESS,
    code
  );
}
