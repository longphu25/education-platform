"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACADEMIC_CHAIN_ERROR__ARITHMETIC_OVERFLOW = exports.ACADEMIC_CHAIN_ERROR__INVALID_COURSE_ID = exports.ACADEMIC_CHAIN_ERROR__REQUIREMENTS_NOT_MET = exports.ACADEMIC_CHAIN_ERROR__CERTIFICATE_ALREADY_MINTED = exports.ACADEMIC_CHAIN_ERROR__UNAUTHORIZED_INSTRUCTOR = exports.ACADEMIC_CHAIN_ERROR__INVALID_GRADE = exports.ACADEMIC_CHAIN_ERROR__COURSE_NOT_COMPLETED = exports.ACADEMIC_CHAIN_ERROR__ALREADY_ENROLLED = exports.ACADEMIC_CHAIN_ERROR__COURSE_NOT_ACTIVE = exports.ACADEMIC_CHAIN_ERROR__INSUFFICIENT_CREDITS = void 0;
exports.getAcademicChainErrorMessage = getAcademicChainErrorMessage;
exports.isAcademicChainError = isAcademicChainError;
var gill_1 = require("gill");
var programs_1 = require("../programs");
/** InsufficientCredits: Insufficient credits to register for this course */
exports.ACADEMIC_CHAIN_ERROR__INSUFFICIENT_CREDITS = 0x1770; // 6000
/** CourseNotActive: Course is not active */
exports.ACADEMIC_CHAIN_ERROR__COURSE_NOT_ACTIVE = 0x1771; // 6001
/** AlreadyEnrolled: Student already enrolled in this course */
exports.ACADEMIC_CHAIN_ERROR__ALREADY_ENROLLED = 0x1772; // 6002
/** CourseNotCompleted: Course not completed yet */
exports.ACADEMIC_CHAIN_ERROR__COURSE_NOT_COMPLETED = 0x1773; // 6003
/** InvalidGrade: Invalid grade value (must be 0-100) */
exports.ACADEMIC_CHAIN_ERROR__INVALID_GRADE = 0x1774; // 6004
/** UnauthorizedInstructor: Unauthorized: Only instructor can perform this action */
exports.ACADEMIC_CHAIN_ERROR__UNAUTHORIZED_INSTRUCTOR = 0x1775; // 6005
/** CertificateAlreadyMinted: Certificate already minted for this course */
exports.ACADEMIC_CHAIN_ERROR__CERTIFICATE_ALREADY_MINTED = 0x1776; // 6006
/** RequirementsNotMet: Not all required courses completed */
exports.ACADEMIC_CHAIN_ERROR__REQUIREMENTS_NOT_MET = 0x1777; // 6007
/** InvalidCourseId: Invalid course ID format */
exports.ACADEMIC_CHAIN_ERROR__INVALID_COURSE_ID = 0x1778; // 6008
/** ArithmeticOverflow: Arithmetic overflow */
exports.ACADEMIC_CHAIN_ERROR__ARITHMETIC_OVERFLOW = 0x1779; // 6009
var academicChainErrorMessages;
if (process.env.NODE_ENV !== 'production') {
    academicChainErrorMessages = (_a = {},
        _a[exports.ACADEMIC_CHAIN_ERROR__ALREADY_ENROLLED] = "Student already enrolled in this course",
        _a[exports.ACADEMIC_CHAIN_ERROR__ARITHMETIC_OVERFLOW] = "Arithmetic overflow",
        _a[exports.ACADEMIC_CHAIN_ERROR__CERTIFICATE_ALREADY_MINTED] = "Certificate already minted for this course",
        _a[exports.ACADEMIC_CHAIN_ERROR__COURSE_NOT_ACTIVE] = "Course is not active",
        _a[exports.ACADEMIC_CHAIN_ERROR__COURSE_NOT_COMPLETED] = "Course not completed yet",
        _a[exports.ACADEMIC_CHAIN_ERROR__INSUFFICIENT_CREDITS] = "Insufficient credits to register for this course",
        _a[exports.ACADEMIC_CHAIN_ERROR__INVALID_COURSE_ID] = "Invalid course ID format",
        _a[exports.ACADEMIC_CHAIN_ERROR__INVALID_GRADE] = "Invalid grade value (must be 0-100)",
        _a[exports.ACADEMIC_CHAIN_ERROR__REQUIREMENTS_NOT_MET] = "Not all required courses completed",
        _a[exports.ACADEMIC_CHAIN_ERROR__UNAUTHORIZED_INSTRUCTOR] = "Unauthorized: Only instructor can perform this action",
        _a);
}
function getAcademicChainErrorMessage(code) {
    if (process.env.NODE_ENV !== 'production') {
        return academicChainErrorMessages[code];
    }
    return 'Error message not available in production bundles.';
}
function isAcademicChainError(error, transactionMessage, code) {
    return (0, gill_1.isProgramError)(error, transactionMessage, programs_1.ACADEMIC_CHAIN_PROGRAM_ADDRESS, code);
}
