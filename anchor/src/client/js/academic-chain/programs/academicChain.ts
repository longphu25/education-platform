/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedClaimGraduationInstruction,
  type ParsedCompleteCourseInstruction,
  type ParsedInitializeInstruction,
  type ParsedMintCertificateInstruction,
  type ParsedPurchaseCreditsInstruction,
  type ParsedRegisterCourseInstruction,
} from '../instructions';

export const ACADEMIC_CHAIN_PROGRAM_ADDRESS =
  '9HuNte7WjS8GVHBKpE42y1QXq4C7e6uNvtjmDRM1G99F' as Address<'9HuNte7WjS8GVHBKpE42y1QXq4C7e6uNvtjmDRM1G99F'>;

export enum AcademicChainAccount {
  Course,
  CourseEnrollment,
  ProgramConfig,
  StudentProfile,
}

export function identifyAcademicChainAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AcademicChainAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 6, 78, 228, 163, 138, 241, 106])
      ),
      0
    )
  ) {
    return AcademicChainAccount.Course;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([119, 94, 144, 89, 26, 179, 54, 137])
      ),
      0
    )
  ) {
    return AcademicChainAccount.CourseEnrollment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 210, 90, 231, 144, 149, 140, 63])
      ),
      0
    )
  ) {
    return AcademicChainAccount.ProgramConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 172, 160, 26, 178, 113, 216, 235])
      ),
      0
    )
  ) {
    return AcademicChainAccount.StudentProfile;
  }
  throw new Error(
    'The provided account could not be identified as a academicChain account.'
  );
}

export enum AcademicChainInstruction {
  ClaimGraduation,
  CompleteCourse,
  Initialize,
  MintCertificate,
  PurchaseCredits,
  RegisterCourse,
}

export function identifyAcademicChainInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AcademicChainInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([87, 121, 87, 168, 63, 70, 91, 158])
      ),
      0
    )
  ) {
    return AcademicChainInstruction.ClaimGraduation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 113, 236, 190, 183, 191, 2, 63])
      ),
      0
    )
  ) {
    return AcademicChainInstruction.CompleteCourse;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return AcademicChainInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([53, 2, 104, 84, 51, 197, 179, 10])
      ),
      0
    )
  ) {
    return AcademicChainInstruction.MintCertificate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 95, 55, 42, 168, 253, 222, 216])
      ),
      0
    )
  ) {
    return AcademicChainInstruction.PurchaseCredits;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([254, 131, 130, 70, 100, 68, 139, 121])
      ),
      0
    )
  ) {
    return AcademicChainInstruction.RegisterCourse;
  }
  throw new Error(
    'The provided instruction could not be identified as a academicChain instruction.'
  );
}

export type ParsedAcademicChainInstruction<
  TProgram extends string = '9HuNte7WjS8GVHBKpE42y1QXq4C7e6uNvtjmDRM1G99F',
> =
  | ({
      instructionType: AcademicChainInstruction.ClaimGraduation;
    } & ParsedClaimGraduationInstruction<TProgram>)
  | ({
      instructionType: AcademicChainInstruction.CompleteCourse;
    } & ParsedCompleteCourseInstruction<TProgram>)
  | ({
      instructionType: AcademicChainInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: AcademicChainInstruction.MintCertificate;
    } & ParsedMintCertificateInstruction<TProgram>)
  | ({
      instructionType: AcademicChainInstruction.PurchaseCredits;
    } & ParsedPurchaseCreditsInstruction<TProgram>)
  | ({
      instructionType: AcademicChainInstruction.RegisterCourse;
    } & ParsedRegisterCourseInstruction<TProgram>);
