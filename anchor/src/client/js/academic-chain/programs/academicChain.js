"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcademicChainInstruction = exports.AcademicChainAccount = exports.ACADEMIC_CHAIN_PROGRAM_ADDRESS = void 0;
exports.identifyAcademicChainAccount = identifyAcademicChainAccount;
exports.identifyAcademicChainInstruction = identifyAcademicChainInstruction;
var gill_1 = require("gill");
exports.ACADEMIC_CHAIN_PROGRAM_ADDRESS = '9HuNte7WjS8GVHBKpE42y1QXq4C7e6uNvtjmDRM1G99F';
var AcademicChainAccount;
(function (AcademicChainAccount) {
    AcademicChainAccount[AcademicChainAccount["Course"] = 0] = "Course";
    AcademicChainAccount[AcademicChainAccount["CourseEnrollment"] = 1] = "CourseEnrollment";
    AcademicChainAccount[AcademicChainAccount["ProgramConfig"] = 2] = "ProgramConfig";
    AcademicChainAccount[AcademicChainAccount["StudentProfile"] = 3] = "StudentProfile";
})(AcademicChainAccount || (exports.AcademicChainAccount = AcademicChainAccount = {}));
function identifyAcademicChainAccount(account) {
    var data = 'data' in account ? account.data : account;
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([206, 6, 78, 228, 163, 138, 241, 106])), 0)) {
        return AcademicChainAccount.Course;
    }
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([119, 94, 144, 89, 26, 179, 54, 137])), 0)) {
        return AcademicChainAccount.CourseEnrollment;
    }
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([196, 210, 90, 231, 144, 149, 140, 63])), 0)) {
        return AcademicChainAccount.ProgramConfig;
    }
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([185, 172, 160, 26, 178, 113, 216, 235])), 0)) {
        return AcademicChainAccount.StudentProfile;
    }
    throw new Error('The provided account could not be identified as a academicChain account.');
}
var AcademicChainInstruction;
(function (AcademicChainInstruction) {
    AcademicChainInstruction[AcademicChainInstruction["ClaimGraduation"] = 0] = "ClaimGraduation";
    AcademicChainInstruction[AcademicChainInstruction["CompleteCourse"] = 1] = "CompleteCourse";
    AcademicChainInstruction[AcademicChainInstruction["Initialize"] = 2] = "Initialize";
    AcademicChainInstruction[AcademicChainInstruction["MintCertificate"] = 3] = "MintCertificate";
    AcademicChainInstruction[AcademicChainInstruction["PurchaseCredits"] = 4] = "PurchaseCredits";
    AcademicChainInstruction[AcademicChainInstruction["RegisterCourse"] = 5] = "RegisterCourse";
})(AcademicChainInstruction || (exports.AcademicChainInstruction = AcademicChainInstruction = {}));
function identifyAcademicChainInstruction(instruction) {
    var data = 'data' in instruction ? instruction.data : instruction;
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([87, 121, 87, 168, 63, 70, 91, 158])), 0)) {
        return AcademicChainInstruction.ClaimGraduation;
    }
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([91, 113, 236, 190, 183, 191, 2, 63])), 0)) {
        return AcademicChainInstruction.CompleteCourse;
    }
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])), 0)) {
        return AcademicChainInstruction.Initialize;
    }
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([53, 2, 104, 84, 51, 197, 179, 10])), 0)) {
        return AcademicChainInstruction.MintCertificate;
    }
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([228, 95, 55, 42, 168, 253, 222, 216])), 0)) {
        return AcademicChainInstruction.PurchaseCredits;
    }
    if ((0, gill_1.containsBytes)(data, (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(new Uint8Array([254, 131, 130, 70, 100, 68, 139, 121])), 0)) {
        return AcademicChainInstruction.RegisterCourse;
    }
    throw new Error('The provided instruction could not be identified as a academicChain instruction.');
}
