/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from 'gill';

export const COURSE_ENROLLMENT_DISCRIMINATOR = new Uint8Array([
  119, 94, 144, 89, 26, 179, 54, 137,
]);

export function getCourseEnrollmentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COURSE_ENROLLMENT_DISCRIMINATOR
  );
}

export type CourseEnrollment = {
  discriminator: ReadonlyUint8Array;
  student: Address;
  courseId: string;
  creditsPaid: bigint;
  enrollmentDate: bigint;
  completionDate: Option<bigint>;
  isCompleted: boolean;
  grade: number;
  certificateMint: Option<Address>;
  bump: number;
};

export type CourseEnrollmentArgs = {
  student: Address;
  courseId: string;
  creditsPaid: number | bigint;
  enrollmentDate: number | bigint;
  completionDate: OptionOrNullable<number | bigint>;
  isCompleted: boolean;
  grade: number;
  certificateMint: OptionOrNullable<Address>;
  bump: number;
};

export function getCourseEnrollmentEncoder(): Encoder<CourseEnrollmentArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['student', getAddressEncoder()],
      ['courseId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['creditsPaid', getU64Encoder()],
      ['enrollmentDate', getI64Encoder()],
      ['completionDate', getOptionEncoder(getI64Encoder())],
      ['isCompleted', getBooleanEncoder()],
      ['grade', getU8Encoder()],
      ['certificateMint', getOptionEncoder(getAddressEncoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COURSE_ENROLLMENT_DISCRIMINATOR })
  );
}

export function getCourseEnrollmentDecoder(): Decoder<CourseEnrollment> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['student', getAddressDecoder()],
    ['courseId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['creditsPaid', getU64Decoder()],
    ['enrollmentDate', getI64Decoder()],
    ['completionDate', getOptionDecoder(getI64Decoder())],
    ['isCompleted', getBooleanDecoder()],
    ['grade', getU8Decoder()],
    ['certificateMint', getOptionDecoder(getAddressDecoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getCourseEnrollmentCodec(): Codec<
  CourseEnrollmentArgs,
  CourseEnrollment
> {
  return combineCodec(
    getCourseEnrollmentEncoder(),
    getCourseEnrollmentDecoder()
  );
}

export function decodeCourseEnrollment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<CourseEnrollment, TAddress>;
export function decodeCourseEnrollment<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<CourseEnrollment, TAddress>;
export function decodeCourseEnrollment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<CourseEnrollment, TAddress>
  | MaybeAccount<CourseEnrollment, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCourseEnrollmentDecoder()
  );
}

export async function fetchCourseEnrollment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<CourseEnrollment, TAddress>> {
  const maybeAccount = await fetchMaybeCourseEnrollment(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCourseEnrollment<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<CourseEnrollment, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCourseEnrollment(maybeAccount);
}

export async function fetchAllCourseEnrollment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<CourseEnrollment>[]> {
  const maybeAccounts = await fetchAllMaybeCourseEnrollment(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCourseEnrollment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<CourseEnrollment>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeCourseEnrollment(maybeAccount)
  );
}
