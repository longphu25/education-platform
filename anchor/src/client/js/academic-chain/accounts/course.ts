/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const COURSE_DISCRIMINATOR = new Uint8Array([
  206, 6, 78, 228, 163, 138, 241, 106,
]);

export function getCourseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(COURSE_DISCRIMINATOR);
}

export type Course = {
  discriminator: ReadonlyUint8Array;
  courseId: string;
  courseName: string;
  instructor: Address;
  requiredCredits: bigint;
  isActive: boolean;
  createdAt: bigint;
  bump: number;
};

export type CourseArgs = {
  courseId: string;
  courseName: string;
  instructor: Address;
  requiredCredits: number | bigint;
  isActive: boolean;
  createdAt: number | bigint;
  bump: number;
};

export function getCourseEncoder(): Encoder<CourseArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['courseId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['courseName', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['instructor', getAddressEncoder()],
      ['requiredCredits', getU64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['createdAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COURSE_DISCRIMINATOR })
  );
}

export function getCourseDecoder(): Decoder<Course> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['courseId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['courseName', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['instructor', getAddressDecoder()],
    ['requiredCredits', getU64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['createdAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getCourseCodec(): Codec<CourseArgs, Course> {
  return combineCodec(getCourseEncoder(), getCourseDecoder());
}

export function decodeCourse<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Course, TAddress>;
export function decodeCourse<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Course, TAddress>;
export function decodeCourse<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Course, TAddress> | MaybeAccount<Course, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCourseDecoder()
  );
}

export async function fetchCourse<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Course, TAddress>> {
  const maybeAccount = await fetchMaybeCourse(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCourse<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Course, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCourse(maybeAccount);
}

export async function fetchAllCourse(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Course>[]> {
  const maybeAccounts = await fetchAllMaybeCourse(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCourse(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Course>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCourse(maybeAccount));
}
