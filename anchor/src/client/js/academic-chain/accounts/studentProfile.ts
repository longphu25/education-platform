/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from 'gill';

export const STUDENT_PROFILE_DISCRIMINATOR = new Uint8Array([
  185, 172, 160, 26, 178, 113, 216, 235,
]);

export function getStudentProfileDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    STUDENT_PROFILE_DISCRIMINATOR
  );
}

export type StudentProfile = {
  discriminator: ReadonlyUint8Array;
  student: Address;
  totalCreditsPurchased: bigint;
  totalCreditsSpent: bigint;
  coursesCompleted: number;
  graduationNft: Option<Address>;
  createdAt: bigint;
  bump: number;
};

export type StudentProfileArgs = {
  student: Address;
  totalCreditsPurchased: number | bigint;
  totalCreditsSpent: number | bigint;
  coursesCompleted: number;
  graduationNft: OptionOrNullable<Address>;
  createdAt: number | bigint;
  bump: number;
};

export function getStudentProfileEncoder(): Encoder<StudentProfileArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['student', getAddressEncoder()],
      ['totalCreditsPurchased', getU64Encoder()],
      ['totalCreditsSpent', getU64Encoder()],
      ['coursesCompleted', getU16Encoder()],
      ['graduationNft', getOptionEncoder(getAddressEncoder())],
      ['createdAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: STUDENT_PROFILE_DISCRIMINATOR })
  );
}

export function getStudentProfileDecoder(): Decoder<StudentProfile> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['student', getAddressDecoder()],
    ['totalCreditsPurchased', getU64Decoder()],
    ['totalCreditsSpent', getU64Decoder()],
    ['coursesCompleted', getU16Decoder()],
    ['graduationNft', getOptionDecoder(getAddressDecoder())],
    ['createdAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getStudentProfileCodec(): Codec<
  StudentProfileArgs,
  StudentProfile
> {
  return combineCodec(getStudentProfileEncoder(), getStudentProfileDecoder());
}

export function decodeStudentProfile<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<StudentProfile, TAddress>;
export function decodeStudentProfile<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<StudentProfile, TAddress>;
export function decodeStudentProfile<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<StudentProfile, TAddress> | MaybeAccount<StudentProfile, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getStudentProfileDecoder()
  );
}

export async function fetchStudentProfile<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<StudentProfile, TAddress>> {
  const maybeAccount = await fetchMaybeStudentProfile(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeStudentProfile<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<StudentProfile, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeStudentProfile(maybeAccount);
}

export async function fetchAllStudentProfile(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<StudentProfile>[]> {
  const maybeAccounts = await fetchAllMaybeStudentProfile(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeStudentProfile(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<StudentProfile>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeStudentProfile(maybeAccount)
  );
}
