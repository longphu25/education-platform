"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.COURSE_ENROLLMENT_DISCRIMINATOR = void 0;
exports.getCourseEnrollmentDiscriminatorBytes = getCourseEnrollmentDiscriminatorBytes;
exports.getCourseEnrollmentEncoder = getCourseEnrollmentEncoder;
exports.getCourseEnrollmentDecoder = getCourseEnrollmentDecoder;
exports.getCourseEnrollmentCodec = getCourseEnrollmentCodec;
exports.decodeCourseEnrollment = decodeCourseEnrollment;
exports.fetchCourseEnrollment = fetchCourseEnrollment;
exports.fetchMaybeCourseEnrollment = fetchMaybeCourseEnrollment;
exports.fetchAllCourseEnrollment = fetchAllCourseEnrollment;
exports.fetchAllMaybeCourseEnrollment = fetchAllMaybeCourseEnrollment;
var gill_1 = require("gill");
exports.COURSE_ENROLLMENT_DISCRIMINATOR = new Uint8Array([
    119, 94, 144, 89, 26, 179, 54, 137,
]);
function getCourseEnrollmentDiscriminatorBytes() {
    return (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8).encode(exports.COURSE_ENROLLMENT_DISCRIMINATOR);
}
function getCourseEnrollmentEncoder() {
    return (0, gill_1.transformEncoder)((0, gill_1.getStructEncoder)([
        ['discriminator', (0, gill_1.fixEncoderSize)((0, gill_1.getBytesEncoder)(), 8)],
        ['student', (0, gill_1.getAddressEncoder)()],
        ['courseId', (0, gill_1.addEncoderSizePrefix)((0, gill_1.getUtf8Encoder)(), (0, gill_1.getU32Encoder)())],
        ['creditsPaid', (0, gill_1.getU64Encoder)()],
        ['enrollmentDate', (0, gill_1.getI64Encoder)()],
        ['completionDate', (0, gill_1.getOptionEncoder)((0, gill_1.getI64Encoder)())],
        ['isCompleted', (0, gill_1.getBooleanEncoder)()],
        ['grade', (0, gill_1.getU8Encoder)()],
        ['certificateMint', (0, gill_1.getOptionEncoder)((0, gill_1.getAddressEncoder)())],
        ['bump', (0, gill_1.getU8Encoder)()],
    ]), function (value) { return (__assign(__assign({}, value), { discriminator: exports.COURSE_ENROLLMENT_DISCRIMINATOR })); });
}
function getCourseEnrollmentDecoder() {
    return (0, gill_1.getStructDecoder)([
        ['discriminator', (0, gill_1.fixDecoderSize)((0, gill_1.getBytesDecoder)(), 8)],
        ['student', (0, gill_1.getAddressDecoder)()],
        ['courseId', (0, gill_1.addDecoderSizePrefix)((0, gill_1.getUtf8Decoder)(), (0, gill_1.getU32Decoder)())],
        ['creditsPaid', (0, gill_1.getU64Decoder)()],
        ['enrollmentDate', (0, gill_1.getI64Decoder)()],
        ['completionDate', (0, gill_1.getOptionDecoder)((0, gill_1.getI64Decoder)())],
        ['isCompleted', (0, gill_1.getBooleanDecoder)()],
        ['grade', (0, gill_1.getU8Decoder)()],
        ['certificateMint', (0, gill_1.getOptionDecoder)((0, gill_1.getAddressDecoder)())],
        ['bump', (0, gill_1.getU8Decoder)()],
    ]);
}
function getCourseEnrollmentCodec() {
    return (0, gill_1.combineCodec)(getCourseEnrollmentEncoder(), getCourseEnrollmentDecoder());
}
function decodeCourseEnrollment(encodedAccount) {
    return (0, gill_1.decodeAccount)(encodedAccount, getCourseEnrollmentDecoder());
}
function fetchCourseEnrollment(rpc, address, config) {
    return __awaiter(this, void 0, void 0, function () {
        var maybeAccount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetchMaybeCourseEnrollment(rpc, address, config)];
                case 1:
                    maybeAccount = _a.sent();
                    (0, gill_1.assertAccountExists)(maybeAccount);
                    return [2 /*return*/, maybeAccount];
            }
        });
    });
}
function fetchMaybeCourseEnrollment(rpc, address, config) {
    return __awaiter(this, void 0, void 0, function () {
        var maybeAccount;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, gill_1.fetchEncodedAccount)(rpc, address, config)];
                case 1:
                    maybeAccount = _a.sent();
                    return [2 /*return*/, decodeCourseEnrollment(maybeAccount)];
            }
        });
    });
}
function fetchAllCourseEnrollment(rpc, addresses, config) {
    return __awaiter(this, void 0, void 0, function () {
        var maybeAccounts;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetchAllMaybeCourseEnrollment(rpc, addresses, config)];
                case 1:
                    maybeAccounts = _a.sent();
                    (0, gill_1.assertAccountsExist)(maybeAccounts);
                    return [2 /*return*/, maybeAccounts];
            }
        });
    });
}
function fetchAllMaybeCourseEnrollment(rpc, addresses, config) {
    return __awaiter(this, void 0, void 0, function () {
        var maybeAccounts;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, gill_1.fetchEncodedAccounts)(rpc, addresses, config)];
                case 1:
                    maybeAccounts = _a.sent();
                    return [2 /*return*/, maybeAccounts.map(function (maybeAccount) {
                            return decodeCourseEnrollment(maybeAccount);
                        })];
            }
        });
    });
}
